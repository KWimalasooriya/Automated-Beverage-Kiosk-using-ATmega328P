   1               		.file	"led.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	i2c_init
  12               	i2c_init:
  13               	.LFB6:
  14               		.file 1 "LCD.h"
   1:LCD.h         **** #ifndef LCD_H
   2:LCD.h         **** #define LCD_H
   3:LCD.h         **** 
   4:LCD.h         **** #include <avr/io.h>
   5:LCD.h         **** #include <util/delay.h>
   6:LCD.h         **** #include <compat/twi.h>
   7:LCD.h         **** 
   8:LCD.h         **** // LCD I2C address (usually 0x27 or 0x3F depending on your module)
   9:LCD.h         **** #define LCD_I2C_ADDRESS 0x27
  10:LCD.h         **** 
  11:LCD.h         **** // LCD Control bits
  12:LCD.h         **** #define LCD_BACKLIGHT 0x08  // On
  13:LCD.h         **** #define LCD_ENABLE    0x04  // Enable bit
  14:LCD.h         **** #define LCD_RW        0x02  // Read/Write bit
  15:LCD.h         **** #define LCD_RS        0x01  // Register select bit
  16:LCD.h         **** 
  17:LCD.h         **** // I2C initialization
  18:LCD.h         **** void i2c_init(void) {
  15               		.loc 1 18 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  19:LCD.h         ****     TWSR = 0x00; // Set prescaler bits to 0
  21               		.loc 1 19 0
  22 0000 1092 B900 		sts 185,__zero_reg__
  20:LCD.h         ****     TWBR = 0x0C; // SCL frequency is 400kHz with 16MHz clock
  23               		.loc 1 20 0
  24 0004 8CE0      		ldi r24,lo8(12)
  25 0006 8093 B800 		sts 184,r24
  21:LCD.h         ****     TWCR = (1 << TWEN); // Enable TWI (I2C)
  26               		.loc 1 21 0
  27 000a 84E0      		ldi r24,lo8(4)
  28 000c 8093 BC00 		sts 188,r24
  29 0010 0895      		ret
  30               		.cfi_endproc
  31               	.LFE6:
  33               	.global	i2c_start
  35               	i2c_start:
  36               	.LFB7:
  22:LCD.h         **** }
  23:LCD.h         **** 
  24:LCD.h         **** // Send START condition on I2C
  25:LCD.h         **** void i2c_start(void) {
  37               		.loc 1 25 0
  38               		.cfi_startproc
  39               	/* prologue: function */
  40               	/* frame size = 0 */
  41               	/* stack size = 0 */
  42               	.L__stack_usage = 0
  26:LCD.h         ****     TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT); // Send START condition
  43               		.loc 1 26 0
  44 0012 84EA      		ldi r24,lo8(-92)
  45 0014 8093 BC00 		sts 188,r24
  46               	.L3:
  27:LCD.h         ****     while (!(TWCR & (1 << TWINT))); // Wait for START to be transmitted
  47               		.loc 1 27 0 discriminator 1
  48 0018 8091 BC00 		lds r24,188
  49 001c 87FF      		sbrs r24,7
  50 001e 00C0      		rjmp .L3
  51               	/* epilogue start */
  28:LCD.h         **** }
  52               		.loc 1 28 0
  53 0020 0895      		ret
  54               		.cfi_endproc
  55               	.LFE7:
  57               	.global	i2c_stop
  59               	i2c_stop:
  60               	.LFB8:
  29:LCD.h         **** 
  30:LCD.h         **** // Send STOP condition on I2C
  31:LCD.h         **** void i2c_stop(void) {
  61               		.loc 1 31 0
  62               		.cfi_startproc
  63               	/* prologue: function */
  64               	/* frame size = 0 */
  65               	/* stack size = 0 */
  66               	.L__stack_usage = 0
  32:LCD.h         ****     TWCR = (1 << TWSTO) | (1 << TWEN) | (1 << TWINT); // Send STOP condition
  67               		.loc 1 32 0
  68 0022 84E9      		ldi r24,lo8(-108)
  69 0024 8093 BC00 		sts 188,r24
  70 0028 0895      		ret
  71               		.cfi_endproc
  72               	.LFE8:
  74               	.global	i2c_write
  76               	i2c_write:
  77               	.LFB9:
  33:LCD.h         **** }
  34:LCD.h         **** 
  35:LCD.h         **** // Write data to I2C
  36:LCD.h         **** void i2c_write(uint8_t data) {
  78               		.loc 1 36 0
  79               		.cfi_startproc
  80               	.LVL0:
  81               	/* prologue: function */
  82               	/* frame size = 0 */
  83               	/* stack size = 0 */
  84               	.L__stack_usage = 0
  37:LCD.h         ****     TWDR = data; // Load data to data register
  85               		.loc 1 37 0
  86 002a 8093 BB00 		sts 187,r24
  38:LCD.h         ****     TWCR = (1 << TWEN) | (1 << TWINT); // Start transmission of data
  87               		.loc 1 38 0
  88 002e 84E8      		ldi r24,lo8(-124)
  89               	.LVL1:
  90 0030 8093 BC00 		sts 188,r24
  91               	.LVL2:
  92               	.L8:
  39:LCD.h         ****     while (!(TWCR & (1 << TWINT))); // Wait for data to be transmitted
  93               		.loc 1 39 0 discriminator 1
  94 0034 8091 BC00 		lds r24,188
  95 0038 87FF      		sbrs r24,7
  96 003a 00C0      		rjmp .L8
  97               	/* epilogue start */
  40:LCD.h         **** }
  98               		.loc 1 40 0
  99 003c 0895      		ret
 100               		.cfi_endproc
 101               	.LFE9:
 103               	.global	lcd_enable
 105               	lcd_enable:
 106               	.LFB10:
  41:LCD.h         **** 
  42:LCD.h         **** // Enable data transmission to LCD
  43:LCD.h         **** void lcd_enable(uint8_t data) {
 107               		.loc 1 43 0
 108               		.cfi_startproc
 109               	.LVL3:
 110 003e CF93      		push r28
 111               	.LCFI0:
 112               		.cfi_def_cfa_offset 3
 113               		.cfi_offset 28, -2
 114               	/* prologue: function */
 115               	/* frame size = 0 */
 116               	/* stack size = 1 */
 117               	.L__stack_usage = 1
 118 0040 C82F      		mov r28,r24
  44:LCD.h         ****     i2c_start();
 119               		.loc 1 44 0
 120 0042 0E94 0000 		call i2c_start
 121               	.LVL4:
  45:LCD.h         ****     i2c_write(LCD_I2C_ADDRESS << 1); // Send address with write bit
 122               		.loc 1 45 0
 123 0046 8EE4      		ldi r24,lo8(78)
 124 0048 0E94 0000 		call i2c_write
 125               	.LVL5:
  46:LCD.h         ****     i2c_write(data | LCD_ENABLE);    // Send data with enable bit set
 126               		.loc 1 46 0
 127 004c 8C2F      		mov r24,r28
 128 004e 8460      		ori r24,lo8(4)
 129 0050 0E94 0000 		call i2c_write
 130               	.LVL6:
 131               	.LBB29:
 132               	.LBB30:
 133               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/lib/avr/include/util/delay.h **** 
 189:/usr/lib/avr/include/util/delay.h **** #else
 190:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/lib/avr/include/util/delay.h **** 	{
 196:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/lib/avr/include/util/delay.h **** 		{
 200:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/lib/avr/include/util/delay.h **** 		}
 204:/usr/lib/avr/include/util/delay.h **** 		return;
 205:/usr/lib/avr/include/util/delay.h **** 	}
 206:/usr/lib/avr/include/util/delay.h **** 	else
 207:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/lib/avr/include/util/delay.h **** #endif
 210:/usr/lib/avr/include/util/delay.h **** }
 211:/usr/lib/avr/include/util/delay.h **** 
 212:/usr/lib/avr/include/util/delay.h **** /**
 213:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/lib/avr/include/util/delay.h **** 
 215:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/lib/avr/include/util/delay.h **** 
 217:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/lib/avr/include/util/delay.h **** 
 220:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/lib/avr/include/util/delay.h **** 
 226:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/lib/avr/include/util/delay.h **** 
 231:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/lib/avr/include/util/delay.h **** 
 236:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/lib/avr/include/util/delay.h ****    respectively.
 240:/usr/lib/avr/include/util/delay.h **** 
 241:/usr/lib/avr/include/util/delay.h ****    \note
 242:/usr/lib/avr/include/util/delay.h **** 
 243:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/lib/avr/include/util/delay.h **** 
 253:/usr/lib/avr/include/util/delay.h ****  */
 254:/usr/lib/avr/include/util/delay.h **** void
 255:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/lib/avr/include/util/delay.h **** {
 257:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/lib/avr/include/util/delay.h **** 
 265:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/lib/avr/include/util/delay.h **** 
 268:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/lib/avr/include/util/delay.h **** 
 271:/usr/lib/avr/include/util/delay.h **** 	#else
 272:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 273:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/lib/avr/include/util/delay.h **** 	#endif
 275:/usr/lib/avr/include/util/delay.h **** 
 276:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 134               		.loc 2 276 0
 135 0054 0000      		nop
 136               	.LVL7:
 137               	.LBE30:
 138               	.LBE29:
  47:LCD.h         ****     _delay_us(1);
  48:LCD.h         ****     i2c_write(data & ~LCD_ENABLE);   // Clear enable bit
 139               		.loc 1 48 0
 140 0056 8C2F      		mov r24,r28
 141 0058 8B7F      		andi r24,lo8(-5)
 142 005a 0E94 0000 		call i2c_write
 143               	.LVL8:
 144               	.LBB31:
 145               	.LBB32:
 146               		.loc 2 276 0
 147 005e 80E1      		ldi r24,lo8(16)
 148 0060 8A95      	1:	dec r24
 149 0062 01F4      		brne 1b
 150 0064 00C0      		rjmp .
 151               	.LVL9:
 152               	.LBE32:
 153               	.LBE31:
 154               	.LBB33:
 155               	.LBB34:
  32:LCD.h         **** }
 156               		.loc 1 32 0
 157 0066 84E9      		ldi r24,lo8(-108)
 158 0068 8093 BC00 		sts 188,r24
 159               	/* epilogue start */
 160               	.LBE34:
 161               	.LBE33:
  49:LCD.h         ****     _delay_us(50);
  50:LCD.h         ****     i2c_stop();
  51:LCD.h         **** }
 162               		.loc 1 51 0
 163 006c CF91      		pop r28
 164               	.LVL10:
 165 006e 0895      		ret
 166               		.cfi_endproc
 167               	.LFE10:
 169               	.global	lcd_send
 171               	lcd_send:
 172               	.LFB11:
  52:LCD.h         **** 
  53:LCD.h         **** // Send data/command to the LCD
  54:LCD.h         **** void lcd_send(uint8_t data, uint8_t mode) {
 173               		.loc 1 54 0
 174               		.cfi_startproc
 175               	.LVL11:
 176 0070 CF93      		push r28
 177               	.LCFI1:
 178               		.cfi_def_cfa_offset 3
 179               		.cfi_offset 28, -2
 180 0072 DF93      		push r29
 181               	.LCFI2:
 182               		.cfi_def_cfa_offset 4
 183               		.cfi_offset 29, -3
 184               	/* prologue: function */
 185               	/* frame size = 0 */
 186               	/* stack size = 2 */
 187               	.L__stack_usage = 2
 188 0074 C82F      		mov r28,r24
 189 0076 D62F      		mov r29,r22
 190 0078 D860      		ori r29,lo8(8)
 191               	.LVL12:
  55:LCD.h         ****     uint8_t highNibble = (data & 0xF0) | mode | LCD_BACKLIGHT;
  56:LCD.h         ****     uint8_t lowNibble = ((data << 4) & 0xF0) | mode | LCD_BACKLIGHT;
  57:LCD.h         ****     
  58:LCD.h         ****     lcd_enable(highNibble);
 192               		.loc 1 58 0
 193 007a 807F      		andi r24,lo8(-16)
 194               	.LVL13:
 195 007c 8D2B      		or r24,r29
 196               	.LVL14:
 197 007e 0E94 0000 		call lcd_enable
 198               	.LVL15:
  59:LCD.h         ****     lcd_enable(lowNibble);
 199               		.loc 1 59 0
 200 0082 20E1      		ldi r18,lo8(16)
 201 0084 C29F      		mul r28,r18
 202 0086 C001      		movw r24,r0
 203 0088 1124      		clr __zero_reg__
 204 008a 8D2B      		or r24,r29
 205               	/* epilogue start */
  60:LCD.h         **** }
 206               		.loc 1 60 0
 207 008c DF91      		pop r29
 208               	.LVL16:
 209 008e CF91      		pop r28
 210               	.LVL17:
  59:LCD.h         ****     lcd_enable(lowNibble);
 211               		.loc 1 59 0
 212 0090 0C94 0000 		jmp lcd_enable
 213               	.LVL18:
 214               		.cfi_endproc
 215               	.LFE11:
 217               	.global	lcd_command
 219               	lcd_command:
 220               	.LFB12:
  61:LCD.h         **** 
  62:LCD.h         **** // Send command to the LCD
  63:LCD.h         **** void lcd_command(uint8_t cmd) {
 221               		.loc 1 63 0
 222               		.cfi_startproc
 223               	.LVL19:
 224               	/* prologue: function */
 225               	/* frame size = 0 */
 226               	/* stack size = 0 */
 227               	.L__stack_usage = 0
  64:LCD.h         ****     lcd_send(cmd, 0);
 228               		.loc 1 64 0
 229 0094 60E0      		ldi r22,0
 230 0096 0C94 0000 		jmp lcd_send
 231               	.LVL20:
 232               		.cfi_endproc
 233               	.LFE12:
 235               	.global	lcd_print
 237               	lcd_print:
 238               	.LFB13:
  65:LCD.h         **** }
  66:LCD.h         **** 	
  67:LCD.h         **** // Print string on the LCD
  68:LCD.h         **** void lcd_print(char *str) {
 239               		.loc 1 68 0
 240               		.cfi_startproc
 241               	.LVL21:
 242 009a CF93      		push r28
 243               	.LCFI3:
 244               		.cfi_def_cfa_offset 3
 245               		.cfi_offset 28, -2
 246 009c DF93      		push r29
 247               	.LCFI4:
 248               		.cfi_def_cfa_offset 4
 249               		.cfi_offset 29, -3
 250               	/* prologue: function */
 251               	/* frame size = 0 */
 252               	/* stack size = 2 */
 253               	.L__stack_usage = 2
 254 009e EC01      		movw r28,r24
 255               	.LVL22:
 256               	.L14:
  69:LCD.h         ****     while (*str) {
 257               		.loc 1 69 0
 258 00a0 8991      		ld r24,Y+
 259               	.LVL23:
 260 00a2 8823      		tst r24
 261 00a4 01F0      		breq .L16
  70:LCD.h         ****         lcd_send(*str, LCD_RS);
 262               		.loc 1 70 0
 263 00a6 61E0      		ldi r22,lo8(1)
 264 00a8 0E94 0000 		call lcd_send
 265               	.LVL24:
 266 00ac 00C0      		rjmp .L14
 267               	.LVL25:
 268               	.L16:
 269               	/* epilogue start */
  71:LCD.h         ****         str++;
  72:LCD.h         ****     }
  73:LCD.h         **** }
 270               		.loc 1 73 0
 271 00ae DF91      		pop r29
 272 00b0 CF91      		pop r28
 273               	.LVL26:
 274 00b2 0895      		ret
 275               		.cfi_endproc
 276               	.LFE13:
 278               	.global	lcd_clear
 280               	lcd_clear:
 281               	.LFB14:
  74:LCD.h         **** 
  75:LCD.h         **** // Clear the LCD screen
  76:LCD.h         **** void lcd_clear(void) {
 282               		.loc 1 76 0
 283               		.cfi_startproc
 284               	/* prologue: function */
 285               	/* frame size = 0 */
 286               	/* stack size = 0 */
 287               	.L__stack_usage = 0
  77:LCD.h         ****     lcd_command(0x01); // Clear display command
 288               		.loc 1 77 0
 289 00b4 81E0      		ldi r24,lo8(1)
 290 00b6 0E94 0000 		call lcd_command
 291               	.LVL27:
 292               	.LBB35:
 293               	.LBB36:
 187:/usr/lib/avr/include/util/delay.h **** 
 294               		.loc 2 187 0
 295 00ba 83EF      		ldi r24,lo8(499)
 296 00bc 91E0      		ldi r25,hi8(499)
 297 00be 0197      	1:	sbiw r24,1
 298 00c0 01F4      		brne 1b
 299 00c2 00C0      		rjmp .
 300 00c4 0000      		nop
 301               	.LVL28:
 302 00c6 0895      		ret
 303               	.LBE36:
 304               	.LBE35:
 305               		.cfi_endproc
 306               	.LFE14:
 308               		.section	.rodata
 309               	.LC0:
 310 0000 00        		.byte	0
 311 0001 40        		.byte	64
 312 0002 14        		.byte	20
 313 0003 54        		.byte	84
 314               		.text
 315               	.global	lcd_setCursor
 317               	lcd_setCursor:
 318               	.LFB15:
  78:LCD.h         ****     _delay_ms(2);      // Wait for the command to execute
  79:LCD.h         **** }
  80:LCD.h         **** 
  81:LCD.h         **** // Set cursor position on the LCD
  82:LCD.h         **** void lcd_setCursor(uint8_t col, uint8_t row) {
 319               		.loc 1 82 0
 320               		.cfi_startproc
 321               	.LVL29:
 322 00c8 0F93      		push r16
 323               	.LCFI5:
 324               		.cfi_def_cfa_offset 3
 325               		.cfi_offset 16, -2
 326 00ca 1F93      		push r17
 327               	.LCFI6:
 328               		.cfi_def_cfa_offset 4
 329               		.cfi_offset 17, -3
 330 00cc CF93      		push r28
 331               	.LCFI7:
 332               		.cfi_def_cfa_offset 5
 333               		.cfi_offset 28, -4
 334 00ce DF93      		push r29
 335               	.LCFI8:
 336               		.cfi_def_cfa_offset 6
 337               		.cfi_offset 29, -5
 338 00d0 00D0      		rcall .
 339 00d2 00D0      		rcall .
 340               	.LCFI9:
 341               		.cfi_def_cfa_offset 10
 342 00d4 CDB7      		in r28,__SP_L__
 343 00d6 DEB7      		in r29,__SP_H__
 344               	.LCFI10:
 345               		.cfi_def_cfa_register 28
 346               	/* prologue: function */
 347               	/* frame size = 4 */
 348               	/* stack size = 8 */
 349               	.L__stack_usage = 8
  83:LCD.h         ****     uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 350               		.loc 1 83 0
 351 00d8 0091 0000 		lds r16,.LC0
 352 00dc 1091 0000 		lds r17,.LC0+1
 353 00e0 2091 0000 		lds r18,.LC0+2
 354 00e4 3091 0000 		lds r19,.LC0+3
 355 00e8 0983      		std Y+1,r16
 356 00ea 1A83      		std Y+2,r17
 357 00ec 2B83      		std Y+3,r18
 358 00ee 3C83      		std Y+4,r19
  84:LCD.h         ****     lcd_command(0x80 | (col + row_offsets[row]));  // Set DDRAM address
 359               		.loc 1 84 0
 360 00f0 FE01      		movw r30,r28
 361 00f2 E60F      		add r30,r22
 362 00f4 F11D      		adc r31,__zero_reg__
 363 00f6 9181      		ldd r25,Z+1
 364 00f8 890F      		add r24,r25
 365               	.LVL30:
 366 00fa 8068      		ori r24,lo8(-128)
 367               	/* epilogue start */
  85:LCD.h         **** }
 368               		.loc 1 85 0
 369 00fc 0F90      		pop __tmp_reg__
 370 00fe 0F90      		pop __tmp_reg__
 371 0100 0F90      		pop __tmp_reg__
 372 0102 0F90      		pop __tmp_reg__
 373 0104 DF91      		pop r29
 374 0106 CF91      		pop r28
 375 0108 1F91      		pop r17
 376 010a 0F91      		pop r16
  84:LCD.h         ****     lcd_command(0x80 | (col + row_offsets[row]));  // Set DDRAM address
 377               		.loc 1 84 0
 378 010c 0C94 0000 		jmp lcd_command
 379               	.LVL31:
 380               		.cfi_endproc
 381               	.LFE15:
 383               	.global	initialize
 385               	initialize:
 386               	.LFB16:
  86:LCD.h         **** 
  87:LCD.h         **** // Initialize the LCD
  88:LCD.h         **** void initialize(void) {
 387               		.loc 1 88 0
 388               		.cfi_startproc
 389               	/* prologue: function */
 390               	/* frame size = 0 */
 391               	/* stack size = 0 */
 392               	.L__stack_usage = 0
 393               	.LVL32:
 394               	.LBB37:
 395               	.LBB38:
 187:/usr/lib/avr/include/util/delay.h **** 
 396               		.loc 2 187 0
 397 0110 83ED      		ldi r24,lo8(12499)
 398 0112 90E3      		ldi r25,hi8(12499)
 399 0114 0197      	1:	sbiw r24,1
 400 0116 01F4      		brne 1b
 401 0118 00C0      		rjmp .
 402 011a 0000      		nop
 403               	.LVL33:
 404               	.LBE38:
 405               	.LBE37:
  89:LCD.h         ****     _delay_ms(50);        // Wait for LCD to power up
  90:LCD.h         ****     lcd_command(0x02);    // Initialize in 4-bit mode
 406               		.loc 1 90 0
 407 011c 82E0      		ldi r24,lo8(2)
 408 011e 0E94 0000 		call lcd_command
 409               	.LVL34:
  91:LCD.h         ****     lcd_command(0x28);    // 2 line, 5x7 matrix
 410               		.loc 1 91 0
 411 0122 88E2      		ldi r24,lo8(40)
 412 0124 0E94 0000 		call lcd_command
 413               	.LVL35:
  92:LCD.h         ****     lcd_command(0x0C);    // Display on, cursor off
 414               		.loc 1 92 0
 415 0128 8CE0      		ldi r24,lo8(12)
 416 012a 0E94 0000 		call lcd_command
 417               	.LVL36:
  93:LCD.h         ****     lcd_command(0x06);    // Increment cursor
 418               		.loc 1 93 0
 419 012e 86E0      		ldi r24,lo8(6)
 420 0130 0E94 0000 		call lcd_command
 421               	.LVL37:
  94:LCD.h         ****     lcd_clear();          // Clear display
 422               		.loc 1 94 0
 423 0134 0C94 0000 		jmp lcd_clear
 424               	.LVL38:
 425               		.cfi_endproc
 426               	.LFE16:
 428               	.global	setup
 430               	setup:
 431               	.LFB18:
 432               		.file 3 "led.c"
   1:led.c         **** #define F_CPU 1000000
   2:led.c         **** #include <avr/io.h>
   3:led.c         **** #include <util/delay.h>
   4:led.c         **** #include "LCD.h"
   5:led.c         **** 
   6:led.c         **** // Function prototypes
   7:led.c         **** void setup();
   8:led.c         **** uint8_t isSwitch1Pressed();
   9:led.c         **** uint8_t isEncoderPressed();
  10:led.c         **** void displayWelcome();
  11:led.c         **** void displayProcessing();
  12:led.c         **** void displayChoosePercentages();
  13:led.c         **** void displayExceed100();
  14:led.c         **** void displayFruit(char *fruit, uint8_t percentage);
  15:led.c         **** void displayOrderComplete();
  16:led.c         **** int8_t readEncoder();
  17:led.c         **** void checkPercentageSum();
  18:led.c         **** 
  19:led.c         **** // Variables
  20:led.c         **** char *fruits[] = {"PINEAPPLE", "MANGO", "APPLE", "ORANGE"};
  21:led.c         **** uint8_t fruitIndex = 0;
  22:led.c         **** uint8_t percentages[4] = {0, 0, 0, 0};  // Array to store percentages for each fruit
  23:led.c         **** uint8_t percentage = 0;
  24:led.c         **** uint8_t selectingPercentage = 0;
  25:led.c         **** uint8_t switch1Pressed = 0;
  26:led.c         **** 
  27:led.c         **** int main(void) {
  28:led.c         ****     setup();  // Initialize pins
  29:led.c         ****     initialize();  // Initialize LCD
  30:led.c         **** 
  31:led.c         ****     displayWelcome();  // Display "Welcome" at the start
  32:led.c         **** 
  33:led.c         ****     // Wait for Switch 1 (PC1) press
  34:led.c         ****     while (!isSwitch1Pressed());
  35:led.c         **** 
  36:led.c         ****     // Disable Switch 1 after the first press
  37:led.c         ****     switch1Pressed = 1;
  38:led.c         **** 
  39:led.c         ****     // Display "Processing.." and other startup messages
  40:led.c         ****     displayProcessing();
  41:led.c         ****     _delay_ms(4000);
  42:led.c         **** 
  43:led.c         ****     displayChoosePercentages();
  44:led.c         ****     _delay_ms(4000);
  45:led.c         **** 
  46:led.c         ****     lcd_clear();
  47:led.c         ****     lcd_setCursor(0, 0);
  48:led.c         ****     lcd_print("Total should not");
  49:led.c         ****     lcd_setCursor(0, 1);
  50:led.c         ****     lcd_print("exceed 100%");
  51:led.c         ****     _delay_ms(4000);
  52:led.c         **** 
  53:led.c         ****     // Begin the fruit and percentage selection process
  54:led.c         ****     displayFruit(fruits[fruitIndex], percentage);
  55:led.c         ****     selectingPercentage = 1;  // Enable percentage selection
  56:led.c         **** 
  57:led.c         ****     while (1) {
  58:led.c         ****         if (selectingPercentage) {
  59:led.c         ****             // Read the rotary encoder to adjust the percentage
  60:led.c         ****             int8_t rotation = readEncoder();
  61:led.c         ****             if (rotation > 0 && percentage < 100) {
  62:led.c         ****                 percentage += 20;
  63:led.c         ****                 displayFruit(fruits[fruitIndex], percentage);  // Update the displayed percentage
  64:led.c         ****             } else if (rotation < 0 && percentage > 0) {
  65:led.c         ****                 percentage -= 20;
  66:led.c         ****                 displayFruit(fruits[fruitIndex], percentage);  // Update the displayed percentage
  67:led.c         ****             }
  68:led.c         **** 
  69:led.c         ****             // Check if the rotary encoder switch is pressed to confirm the percentage and move to 
  70:led.c         ****             if (isEncoderPressed()) {
  71:led.c         ****                 _delay_ms(50); // Debounce delay
  72:led.c         ****                 if (isEncoderPressed()) { // Confirm switch press after delay
  73:led.c         ****                     percentages[fruitIndex] = percentage;  // Store the selected percentage
  74:led.c         ****                     fruitIndex++;  // Move to the next fruit
  75:led.c         **** 
  76:led.c         ****                     if (fruitIndex < 4) {
  77:led.c         ****                         percentage = 0;  // Reset percentage for the next fruit
  78:led.c         ****                         displayFruit(fruits[fruitIndex], percentage);  // Display next fruit
  79:led.c         ****                     } else {
  80:led.c         ****                         selectingPercentage = 0;  // Disable encoder
  81:led.c         ****                         checkPercentageSum();  // Check if total exceeds 100
  82:led.c         ****                     }
  83:led.c         ****                 }
  84:led.c         ****             }
  85:led.c         ****         }
  86:led.c         ****         _delay_ms(50);  // Small delay for debouncing
  87:led.c         ****     }
  88:led.c         **** 
  89:led.c         ****     return 0;
  90:led.c         **** }
  91:led.c         **** 
  92:led.c         **** // Function to set up the button and encoder pins
  93:led.c         **** void setup() {
 433               		.loc 3 93 0
 434               		.cfi_startproc
 435               	/* prologue: function */
 436               	/* frame size = 0 */
 437               	/* stack size = 0 */
 438               	.L__stack_usage = 0
  94:led.c         ****     DDRC &= ~(1 << PC0);  // Set PC0 (Switch 1) as input
 439               		.loc 3 94 0
 440 0138 3898      		cbi 0x7,0
  95:led.c         ****     PORTC |= (1 << PC0);  // Enable pull-up resistor on PC0
 441               		.loc 3 95 0
 442 013a 409A      		sbi 0x8,0
  96:led.c         **** 
  97:led.c         ****     DDRB &= ~(1 << PB1);  // Set PB1 (CLK) as input
 443               		.loc 3 97 0
 444 013c 2198      		cbi 0x4,1
  98:led.c         ****     DDRB &= ~(1 << PB2);  // Set PB2 (DT) as input
 445               		.loc 3 98 0
 446 013e 2298      		cbi 0x4,2
  99:led.c         ****     DDRB &= ~(1 << PB3);  // Set PB3 (SW) as input
 447               		.loc 3 99 0
 448 0140 2398      		cbi 0x4,3
 100:led.c         ****     PORTB |= (1 << PB1) | (1 << PB2) | (1 << PB3);  // Enable pull-up resistors for encoder
 449               		.loc 3 100 0
 450 0142 85B1      		in r24,0x5
 451 0144 8E60      		ori r24,lo8(14)
 452 0146 85B9      		out 0x5,r24
 453 0148 0895      		ret
 454               		.cfi_endproc
 455               	.LFE18:
 457               	.global	isSwitch1Pressed
 459               	isSwitch1Pressed:
 460               	.LFB19:
 101:led.c         **** }
 102:led.c         **** 
 103:led.c         **** // Function to check if Switch 1 (PC1) is pressed
 104:led.c         **** uint8_t isSwitch1Pressed() {
 461               		.loc 3 104 0
 462               		.cfi_startproc
 463               	/* prologue: function */
 464               	/* frame size = 0 */
 465               	/* stack size = 0 */
 466               	.L__stack_usage = 0
 105:led.c         ****     return !(PINC & (1 << PC0));
 467               		.loc 3 105 0
 468 014a 86B1      		in r24,0x6
 469 014c 8095      		com r24
 106:led.c         **** }
 470               		.loc 3 106 0
 471 014e 8170      		andi r24,lo8(1)
 472 0150 0895      		ret
 473               		.cfi_endproc
 474               	.LFE19:
 476               	.global	isEncoderPressed
 478               	isEncoderPressed:
 479               	.LFB20:
 107:led.c         **** 
 108:led.c         **** // Function to check if rotary encoder switch is pressed
 109:led.c         **** uint8_t isEncoderPressed() {
 480               		.loc 3 109 0
 481               		.cfi_startproc
 482               	/* prologue: function */
 483               	/* frame size = 0 */
 484               	/* stack size = 0 */
 485               	.L__stack_usage = 0
 110:led.c         ****     return !(PINB & (1 << PB3));
 486               		.loc 3 110 0
 487 0152 83B1      		in r24,0x3
 488 0154 83FB      		bst r24,3
 489 0156 8827      		clr r24
 490 0158 80F9      		bld r24,0
 111:led.c         **** }
 491               		.loc 3 111 0
 492 015a 91E0      		ldi r25,lo8(1)
 493 015c 8927      		eor r24,r25
 494 015e 0895      		ret
 495               		.cfi_endproc
 496               	.LFE20:
 498               		.section	.rodata.str1.1,"aMS",@progbits,1
 499               	.LC1:
 500 0000 5765 6C63 		.string	"Welcome"
 500      6F6D 6500 
 501               		.text
 502               	.global	displayWelcome
 504               	displayWelcome:
 505               	.LFB21:
 112:led.c         **** 
 113:led.c         **** // Function to display "Welcome" at the beginning
 114:led.c         **** void displayWelcome() {
 506               		.loc 3 114 0
 507               		.cfi_startproc
 508               	/* prologue: function */
 509               	/* frame size = 0 */
 510               	/* stack size = 0 */
 511               	.L__stack_usage = 0
 115:led.c         ****     lcd_clear();
 512               		.loc 3 115 0
 513 0160 0E94 0000 		call lcd_clear
 514               	.LVL39:
 116:led.c         ****     lcd_setCursor(4, 0);  // Display "Welcome" in the middle
 515               		.loc 3 116 0
 516 0164 60E0      		ldi r22,0
 517 0166 84E0      		ldi r24,lo8(4)
 518 0168 0E94 0000 		call lcd_setCursor
 519               	.LVL40:
 117:led.c         ****     lcd_print("Welcome");
 520               		.loc 3 117 0
 521 016c 80E0      		ldi r24,lo8(.LC1)
 522 016e 90E0      		ldi r25,hi8(.LC1)
 523 0170 0C94 0000 		jmp lcd_print
 524               	.LVL41:
 525               		.cfi_endproc
 526               	.LFE21:
 528               		.section	.rodata.str1.1
 529               	.LC2:
 530 0008 5072 6F63 		.string	"Processing.."
 530      6573 7369 
 530      6E67 2E2E 
 530      00
 531               		.text
 532               	.global	displayProcessing
 534               	displayProcessing:
 535               	.LFB22:
 118:led.c         **** }
 119:led.c         **** 
 120:led.c         **** // Function to display "Processing.." message for 4 seconds
 121:led.c         **** void displayProcessing() {
 536               		.loc 3 121 0
 537               		.cfi_startproc
 538               	/* prologue: function */
 539               	/* frame size = 0 */
 540               	/* stack size = 0 */
 541               	.L__stack_usage = 0
 122:led.c         ****     lcd_clear();
 542               		.loc 3 122 0
 543 0174 0E94 0000 		call lcd_clear
 544               	.LVL42:
 123:led.c         ****     lcd_setCursor(0, 0);
 545               		.loc 3 123 0
 546 0178 60E0      		ldi r22,0
 547 017a 80E0      		ldi r24,0
 548 017c 0E94 0000 		call lcd_setCursor
 549               	.LVL43:
 124:led.c         ****     lcd_print("Processing..");
 550               		.loc 3 124 0
 551 0180 80E0      		ldi r24,lo8(.LC2)
 552 0182 90E0      		ldi r25,hi8(.LC2)
 553 0184 0C94 0000 		jmp lcd_print
 554               	.LVL44:
 555               		.cfi_endproc
 556               	.LFE22:
 558               		.section	.rodata.str1.1
 559               	.LC3:
 560 0015 5365 6C65 		.string	"Select the"
 560      6374 2074 
 560      6865 00
 561               	.LC4:
 562 0020 5065 7263 		.string	"Percentages.."
 562      656E 7461 
 562      6765 732E 
 562      2E00 
 563               		.text
 564               	.global	displayChoosePercentages
 566               	displayChoosePercentages:
 567               	.LFB23:
 125:led.c         **** }
 126:led.c         **** 
 127:led.c         **** // Function to display "Select the" and "Percentages.." message
 128:led.c         **** void displayChoosePercentages() {
 568               		.loc 3 128 0
 569               		.cfi_startproc
 570               	/* prologue: function */
 571               	/* frame size = 0 */
 572               	/* stack size = 0 */
 573               	.L__stack_usage = 0
 129:led.c         ****     lcd_clear();
 574               		.loc 3 129 0
 575 0188 0E94 0000 		call lcd_clear
 576               	.LVL45:
 130:led.c         ****     lcd_setCursor(0, 0);
 577               		.loc 3 130 0
 578 018c 60E0      		ldi r22,0
 579 018e 80E0      		ldi r24,0
 580 0190 0E94 0000 		call lcd_setCursor
 581               	.LVL46:
 131:led.c         ****     lcd_print("Select the");
 582               		.loc 3 131 0
 583 0194 80E0      		ldi r24,lo8(.LC3)
 584 0196 90E0      		ldi r25,hi8(.LC3)
 585 0198 0E94 0000 		call lcd_print
 586               	.LVL47:
 132:led.c         ****     lcd_setCursor(0, 1);
 587               		.loc 3 132 0
 588 019c 61E0      		ldi r22,lo8(1)
 589 019e 80E0      		ldi r24,0
 590 01a0 0E94 0000 		call lcd_setCursor
 591               	.LVL48:
 133:led.c         ****     lcd_print("Percentages..");
 592               		.loc 3 133 0
 593 01a4 80E0      		ldi r24,lo8(.LC4)
 594 01a6 90E0      		ldi r25,hi8(.LC4)
 595 01a8 0C94 0000 		jmp lcd_print
 596               	.LVL49:
 597               		.cfi_endproc
 598               	.LFE23:
 600               		.section	.rodata.str1.1
 601               	.LC5:
 602 002e 4578 6365 		.string	"Exceeded 100%"
 602      6564 6564 
 602      2031 3030 
 602      2500 
 603               	.LC6:
 604 003c 5365 6C65 		.string	"Select again"
 604      6374 2061 
 604      6761 696E 
 604      00
 605               		.text
 606               	.global	displayExceed100
 608               	displayExceed100:
 609               	.LFB24:
 134:led.c         **** }
 135:led.c         **** 
 136:led.c         **** // Function to display exceeded 100% message
 137:led.c         **** void displayExceed100() {
 610               		.loc 3 137 0
 611               		.cfi_startproc
 612               	/* prologue: function */
 613               	/* frame size = 0 */
 614               	/* stack size = 0 */
 615               	.L__stack_usage = 0
 138:led.c         ****     lcd_clear();
 616               		.loc 3 138 0
 617 01ac 0E94 0000 		call lcd_clear
 618               	.LVL50:
 139:led.c         ****     lcd_setCursor(0, 0);
 619               		.loc 3 139 0
 620 01b0 60E0      		ldi r22,0
 621 01b2 80E0      		ldi r24,0
 622 01b4 0E94 0000 		call lcd_setCursor
 623               	.LVL51:
 140:led.c         ****     lcd_print("Exceeded 100%");
 624               		.loc 3 140 0
 625 01b8 80E0      		ldi r24,lo8(.LC5)
 626 01ba 90E0      		ldi r25,hi8(.LC5)
 627 01bc 0E94 0000 		call lcd_print
 628               	.LVL52:
 141:led.c         ****     lcd_setCursor(0, 1);
 629               		.loc 3 141 0
 630 01c0 61E0      		ldi r22,lo8(1)
 631 01c2 80E0      		ldi r24,0
 632 01c4 0E94 0000 		call lcd_setCursor
 633               	.LVL53:
 142:led.c         ****     lcd_print("Select again");
 634               		.loc 3 142 0
 635 01c8 80E0      		ldi r24,lo8(.LC6)
 636 01ca 90E0      		ldi r25,hi8(.LC6)
 637 01cc 0E94 0000 		call lcd_print
 638               	.LVL54:
 639               	.LBB39:
 640               	.LBB40:
 187:/usr/lib/avr/include/util/delay.h **** 
 641               		.loc 2 187 0
 642 01d0 2FEF      		ldi r18,lo8(799999)
 643 01d2 84E3      		ldi r24,hi8(799999)
 644 01d4 9CE0      		ldi r25,hlo8(799999)
 645 01d6 2150      	1:	subi r18,1
 646 01d8 8040      		sbci r24,0
 647 01da 9040      		sbci r25,0
 648 01dc 01F4      		brne 1b
 649 01de 00C0      		rjmp .
 650 01e0 0000      		nop
 651               	.LVL55:
 652 01e2 0895      		ret
 653               	.LBE40:
 654               	.LBE39:
 655               		.cfi_endproc
 656               	.LFE24:
 658               		.section	.rodata.str1.1
 659               	.LC7:
 660 0049 2564 2525 		.string	"%d%%"
 660      00
 661               		.text
 662               	.global	displayFruit
 664               	displayFruit:
 665               	.LFB25:
 143:led.c         ****     _delay_ms(4000);
 144:led.c         **** }
 145:led.c         **** 
 146:led.c         **** // Function to display a fruit and its percentage
 147:led.c         **** void displayFruit(char *fruit, uint8_t percentage) {
 666               		.loc 3 147 0
 667               		.cfi_startproc
 668               	.LVL56:
 669 01e4 EF92      		push r14
 670               	.LCFI11:
 671               		.cfi_def_cfa_offset 3
 672               		.cfi_offset 14, -2
 673 01e6 FF92      		push r15
 674               	.LCFI12:
 675               		.cfi_def_cfa_offset 4
 676               		.cfi_offset 15, -3
 677 01e8 0F93      		push r16
 678               	.LCFI13:
 679               		.cfi_def_cfa_offset 5
 680               		.cfi_offset 16, -4
 681 01ea 1F93      		push r17
 682               	.LCFI14:
 683               		.cfi_def_cfa_offset 6
 684               		.cfi_offset 17, -5
 685 01ec CF93      		push r28
 686               	.LCFI15:
 687               		.cfi_def_cfa_offset 7
 688               		.cfi_offset 28, -6
 689 01ee DF93      		push r29
 690               	.LCFI16:
 691               		.cfi_def_cfa_offset 8
 692               		.cfi_offset 29, -7
 693 01f0 CDB7      		in r28,__SP_L__
 694 01f2 DEB7      		in r29,__SP_H__
 695               	.LCFI17:
 696               		.cfi_def_cfa_register 28
 697 01f4 6097      		sbiw r28,16
 698               	.LCFI18:
 699               		.cfi_def_cfa_offset 24
 700 01f6 0FB6      		in __tmp_reg__,__SREG__
 701 01f8 F894      		cli
 702 01fa DEBF      		out __SP_H__,r29
 703 01fc 0FBE      		out __SREG__,__tmp_reg__
 704 01fe CDBF      		out __SP_L__,r28
 705               	/* prologue: function */
 706               	/* frame size = 16 */
 707               	/* stack size = 22 */
 708               	.L__stack_usage = 22
 709 0200 7C01      		movw r14,r24
 710 0202 162F      		mov r17,r22
 148:led.c         ****     char buffer[16];
 149:led.c         ****     lcd_clear();
 711               		.loc 3 149 0
 712 0204 0E94 0000 		call lcd_clear
 713               	.LVL57:
 150:led.c         ****     lcd_setCursor(0, 0);
 714               		.loc 3 150 0
 715 0208 60E0      		ldi r22,0
 716 020a 80E0      		ldi r24,0
 717 020c 0E94 0000 		call lcd_setCursor
 718               	.LVL58:
 151:led.c         ****     lcd_print(fruit);
 719               		.loc 3 151 0
 720 0210 C701      		movw r24,r14
 721 0212 0E94 0000 		call lcd_print
 722               	.LVL59:
 152:led.c         ****     lcd_setCursor(0, 1);
 723               		.loc 3 152 0
 724 0216 61E0      		ldi r22,lo8(1)
 725 0218 80E0      		ldi r24,0
 726 021a 0E94 0000 		call lcd_setCursor
 727               	.LVL60:
 153:led.c         ****     snprintf(buffer, 16, "%d%%", percentage);
 728               		.loc 3 153 0
 729 021e 1F92      		push __zero_reg__
 730 0220 1F93      		push r17
 731 0222 80E0      		ldi r24,lo8(.LC7)
 732 0224 90E0      		ldi r25,hi8(.LC7)
 733 0226 9F93      		push r25
 734 0228 8F93      		push r24
 735 022a 1F92      		push __zero_reg__
 736 022c 80E1      		ldi r24,lo8(16)
 737 022e 8F93      		push r24
 738 0230 8E01      		movw r16,r28
 739 0232 0F5F      		subi r16,-1
 740 0234 1F4F      		sbci r17,-1
 741 0236 1F93      		push r17
 742 0238 0F93      		push r16
 743 023a 0E94 0000 		call snprintf
 744               	.LVL61:
 154:led.c         ****     lcd_print(buffer);
 745               		.loc 3 154 0
 746 023e C801      		movw r24,r16
 747 0240 0E94 0000 		call lcd_print
 748               	.LVL62:
 155:led.c         **** }
 749               		.loc 3 155 0
 750 0244 0FB6      		in __tmp_reg__,__SREG__
 751 0246 F894      		cli
 752 0248 DEBF      		out __SP_H__,r29
 753 024a 0FBE      		out __SREG__,__tmp_reg__
 754 024c CDBF      		out __SP_L__,r28
 755               	/* epilogue start */
 756 024e 6096      		adiw r28,16
 757 0250 0FB6      		in __tmp_reg__,__SREG__
 758 0252 F894      		cli
 759 0254 DEBF      		out __SP_H__,r29
 760 0256 0FBE      		out __SREG__,__tmp_reg__
 761 0258 CDBF      		out __SP_L__,r28
 762 025a DF91      		pop r29
 763 025c CF91      		pop r28
 764 025e 1F91      		pop r17
 765               	.LVL63:
 766 0260 0F91      		pop r16
 767 0262 FF90      		pop r15
 768 0264 EF90      		pop r14
 769               	.LVL64:
 770 0266 0895      		ret
 771               		.cfi_endproc
 772               	.LFE25:
 774               		.section	.rodata.str1.1
 775               	.LC8:
 776 004e 596F 7572 		.string	"Your order"
 776      206F 7264 
 776      6572 00
 777               	.LC9:
 778 0059 6973 206F 		.string	"is on the way"
 778      6E20 7468 
 778      6520 7761 
 778      7900 
 779               		.text
 780               	.global	displayOrderComplete
 782               	displayOrderComplete:
 783               	.LFB26:
 156:led.c         **** 
 157:led.c         **** // Function to display "Your order is" and "on the way"
 158:led.c         **** void displayOrderComplete() {
 784               		.loc 3 158 0
 785               		.cfi_startproc
 786               	/* prologue: function */
 787               	/* frame size = 0 */
 788               	/* stack size = 0 */
 789               	.L__stack_usage = 0
 159:led.c         ****     lcd_clear();
 790               		.loc 3 159 0
 791 0268 0E94 0000 		call lcd_clear
 792               	.LVL65:
 160:led.c         ****     lcd_setCursor(0, 0);
 793               		.loc 3 160 0
 794 026c 60E0      		ldi r22,0
 795 026e 80E0      		ldi r24,0
 796 0270 0E94 0000 		call lcd_setCursor
 797               	.LVL66:
 161:led.c         ****     lcd_print("Your order");
 798               		.loc 3 161 0
 799 0274 80E0      		ldi r24,lo8(.LC8)
 800 0276 90E0      		ldi r25,hi8(.LC8)
 801 0278 0E94 0000 		call lcd_print
 802               	.LVL67:
 162:led.c         ****     lcd_setCursor(0, 1);
 803               		.loc 3 162 0
 804 027c 61E0      		ldi r22,lo8(1)
 805 027e 80E0      		ldi r24,0
 806 0280 0E94 0000 		call lcd_setCursor
 807               	.LVL68:
 163:led.c         ****     lcd_print("is on the way");
 808               		.loc 3 163 0
 809 0284 80E0      		ldi r24,lo8(.LC9)
 810 0286 90E0      		ldi r25,hi8(.LC9)
 811 0288 0C94 0000 		jmp lcd_print
 812               	.LVL69:
 813               		.cfi_endproc
 814               	.LFE26:
 816               	.global	checkPercentageSum
 818               	checkPercentageSum:
 819               	.LFB27:
 164:led.c         **** }
 165:led.c         **** 
 166:led.c         **** // Function to check the total percentage
 167:led.c         **** void checkPercentageSum() {
 820               		.loc 3 167 0
 821               		.cfi_startproc
 822               	/* prologue: function */
 823               	/* frame size = 0 */
 824               	/* stack size = 0 */
 825               	.L__stack_usage = 0
 826               	.LVL70:
 168:led.c         ****     uint8_t total = percentages[0] + percentages[1] + percentages[2] + percentages[3];
 169:led.c         ****     if (total > 100) {
 827               		.loc 3 169 0
 828 028c 9091 0000 		lds r25,percentages
 829 0290 8091 0000 		lds r24,percentages+1
 830 0294 890F      		add r24,r25
 831 0296 9091 0000 		lds r25,percentages+2
 832 029a 890F      		add r24,r25
 833 029c 9091 0000 		lds r25,percentages+3
 834 02a0 890F      		add r24,r25
 835 02a2 8536      		cpi r24,lo8(101)
 836 02a4 00F0      		brlo .L30
 837               	.LBB43:
 838               	.LBB44:
 170:led.c         ****         displayExceed100();  // If total exceeds 100%, allow re-selection
 839               		.loc 3 170 0
 840 02a6 0E94 0000 		call displayExceed100
 841               	.LVL71:
 171:led.c         ****         fruitIndex = 0;  // Reset to the first fruit
 842               		.loc 3 171 0
 843 02aa 1092 0000 		sts fruitIndex,__zero_reg__
 172:led.c         ****         percentage = 0;
 844               		.loc 3 172 0
 845 02ae 1092 0000 		sts percentage,__zero_reg__
 173:led.c         ****         displayFruit(fruits[fruitIndex], percentage);
 846               		.loc 3 173 0
 847 02b2 60E0      		ldi r22,0
 848 02b4 8091 0000 		lds r24,fruits
 849 02b8 9091 0000 		lds r25,fruits+1
 850 02bc 0E94 0000 		call displayFruit
 851               	.LVL72:
 174:led.c         ****         selectingPercentage = 1;  // Re-enable encoder for selection
 852               		.loc 3 174 0
 853 02c0 81E0      		ldi r24,lo8(1)
 854 02c2 8093 0000 		sts selectingPercentage,r24
 855 02c6 0895      		ret
 856               	.LVL73:
 857               	.L30:
 858               	.LBE44:
 859               	.LBE43:
 175:led.c         ****     } else {
 176:led.c         ****         displayOrderComplete();  // If total is valid, display order message
 860               		.loc 3 176 0
 861 02c8 0C94 0000 		jmp displayOrderComplete
 862               	.LVL74:
 863               		.cfi_endproc
 864               	.LFE27:
 866               	.global	readEncoder
 868               	readEncoder:
 869               	.LFB28:
 177:led.c         ****     }
 178:led.c         **** }
 179:led.c         **** 
 180:led.c         **** // Function to read rotary encoder rotation
 181:led.c         **** int8_t readEncoder() {
 870               		.loc 3 181 0
 871               		.cfi_startproc
 872               	/* prologue: function */
 873               	/* frame size = 0 */
 874               	/* stack size = 0 */
 875               	.L__stack_usage = 0
 182:led.c         ****     static uint8_t lastStateCLK = 0;
 183:led.c         ****     uint8_t currentStateCLK = PINB & (1 << PB1);
 876               		.loc 3 183 0
 877 02cc 83B1      		in r24,0x3
 878 02ce 8270      		andi r24,lo8(2)
 879               	.LVL75:
 184:led.c         **** 
 185:led.c         ****     if (currentStateCLK != lastStateCLK) {
 880               		.loc 3 185 0
 881 02d0 9091 0000 		lds r25,lastStateCLK.1829
 882 02d4 8917      		cp r24,r25
 883 02d6 01F0      		breq .L36
 186:led.c         ****         if (PINB & (1 << PB2)) {
 884               		.loc 3 186 0
 885 02d8 1A9B      		sbis 0x3,2
 886 02da 00C0      		rjmp .L35
 187:led.c         ****             lastStateCLK = currentStateCLK;
 887               		.loc 3 187 0
 888 02dc 8093 0000 		sts lastStateCLK.1829,r24
 188:led.c         ****             return 1;  // Clockwise rotation
 889               		.loc 3 188 0
 890 02e0 81E0      		ldi r24,lo8(1)
 891               	.LVL76:
 892 02e2 0895      		ret
 893               	.LVL77:
 894               	.L35:
 189:led.c         ****         } else {
 190:led.c         ****             lastStateCLK = currentStateCLK;
 895               		.loc 3 190 0
 896 02e4 8093 0000 		sts lastStateCLK.1829,r24
 191:led.c         ****             return -1;  // Counterclockwise rotation
 897               		.loc 3 191 0
 898 02e8 8FEF      		ldi r24,lo8(-1)
 899               	.LVL78:
 900 02ea 0895      		ret
 901               	.LVL79:
 902               	.L36:
 192:led.c         ****         }
 193:led.c         ****     }
 194:led.c         ****     return 0;  // No rotation
 903               		.loc 3 194 0
 904 02ec 80E0      		ldi r24,0
 905               	.LVL80:
 195:led.c         **** }
 906               		.loc 3 195 0
 907 02ee 0895      		ret
 908               		.cfi_endproc
 909               	.LFE28:
 911               		.section	.rodata.str1.1
 912               	.LC10:
 913 0067 546F 7461 		.string	"Total should not"
 913      6C20 7368 
 913      6F75 6C64 
 913      206E 6F74 
 913      00
 914               	.LC11:
 915 0078 6578 6365 		.string	"exceed 100%"
 915      6564 2031 
 915      3030 2500 
 916               		.section	.text.startup,"ax",@progbits
 917               	.global	main
 919               	main:
 920               	.LFB17:
  27:led.c         ****     setup();  // Initialize pins
 921               		.loc 3 27 0
 922               		.cfi_startproc
 923               	/* prologue: function */
 924               	/* frame size = 0 */
 925               	/* stack size = 0 */
 926               	.L__stack_usage = 0
  28:led.c         ****     initialize();  // Initialize LCD
 927               		.loc 3 28 0
 928 0000 0E94 0000 		call setup
 929               	.LVL81:
  29:led.c         **** 
 930               		.loc 3 29 0
 931 0004 0E94 0000 		call initialize
 932               	.LVL82:
  31:led.c         **** 
 933               		.loc 3 31 0
 934 0008 0E94 0000 		call displayWelcome
 935               	.LVL83:
 936               	.L38:
  34:led.c         **** 
 937               		.loc 3 34 0 discriminator 1
 938 000c 0E94 0000 		call isSwitch1Pressed
 939               	.LVL84:
 940 0010 8823      		tst r24
 941 0012 01F0      		breq .L38
  37:led.c         **** 
 942               		.loc 3 37 0
 943 0014 C1E0      		ldi r28,lo8(1)
 944 0016 C093 0000 		sts switch1Pressed,r28
  40:led.c         ****     _delay_ms(4000);
 945               		.loc 3 40 0
 946 001a 0E94 0000 		call displayProcessing
 947               	.LVL85:
 948               	.LBB45:
 949               	.LBB46:
 187:/usr/lib/avr/include/util/delay.h **** 
 950               		.loc 2 187 0
 951 001e 2FEF      		ldi r18,lo8(799999)
 952 0020 84E3      		ldi r24,hi8(799999)
 953 0022 9CE0      		ldi r25,hlo8(799999)
 954 0024 2150      	1:	subi r18,1
 955 0026 8040      		sbci r24,0
 956 0028 9040      		sbci r25,0
 957 002a 01F4      		brne 1b
 958 002c 00C0      		rjmp .
 959 002e 0000      		nop
 960               	.LVL86:
 961               	.LBE46:
 962               	.LBE45:
  43:led.c         ****     _delay_ms(4000);
 963               		.loc 3 43 0
 964 0030 0E94 0000 		call displayChoosePercentages
 965               	.LVL87:
 966               	.LBB47:
 967               	.LBB48:
 187:/usr/lib/avr/include/util/delay.h **** 
 968               		.loc 2 187 0
 969 0034 2FEF      		ldi r18,lo8(799999)
 970 0036 84E3      		ldi r24,hi8(799999)
 971 0038 9CE0      		ldi r25,hlo8(799999)
 972 003a 2150      	1:	subi r18,1
 973 003c 8040      		sbci r24,0
 974 003e 9040      		sbci r25,0
 975 0040 01F4      		brne 1b
 976 0042 00C0      		rjmp .
 977 0044 0000      		nop
 978               	.LVL88:
 979               	.LBE48:
 980               	.LBE47:
  46:led.c         ****     lcd_setCursor(0, 0);
 981               		.loc 3 46 0
 982 0046 0E94 0000 		call lcd_clear
 983               	.LVL89:
  47:led.c         ****     lcd_print("Total should not");
 984               		.loc 3 47 0
 985 004a 60E0      		ldi r22,0
 986 004c 80E0      		ldi r24,0
 987 004e 0E94 0000 		call lcd_setCursor
 988               	.LVL90:
  48:led.c         ****     lcd_setCursor(0, 1);
 989               		.loc 3 48 0
 990 0052 80E0      		ldi r24,lo8(.LC10)
 991 0054 90E0      		ldi r25,hi8(.LC10)
 992 0056 0E94 0000 		call lcd_print
 993               	.LVL91:
  49:led.c         ****     lcd_print("exceed 100%");
 994               		.loc 3 49 0
 995 005a 61E0      		ldi r22,lo8(1)
 996 005c 80E0      		ldi r24,0
 997 005e 0E94 0000 		call lcd_setCursor
 998               	.LVL92:
  50:led.c         ****     _delay_ms(4000);
 999               		.loc 3 50 0
 1000 0062 80E0      		ldi r24,lo8(.LC11)
 1001 0064 90E0      		ldi r25,hi8(.LC11)
 1002 0066 0E94 0000 		call lcd_print
 1003               	.LVL93:
 1004               	.LBB49:
 1005               	.LBB50:
 187:/usr/lib/avr/include/util/delay.h **** 
 1006               		.loc 2 187 0
 1007 006a 2FEF      		ldi r18,lo8(799999)
 1008 006c 84E3      		ldi r24,hi8(799999)
 1009 006e 9CE0      		ldi r25,hlo8(799999)
 1010 0070 2150      	1:	subi r18,1
 1011 0072 8040      		sbci r24,0
 1012 0074 9040      		sbci r25,0
 1013 0076 01F4      		brne 1b
 1014 0078 00C0      		rjmp .
 1015 007a 0000      		nop
 1016               	.LVL94:
 1017               	.LBE50:
 1018               	.LBE49:
  54:led.c         ****     selectingPercentage = 1;  // Enable percentage selection
 1019               		.loc 3 54 0
 1020 007c E091 0000 		lds r30,fruitIndex
 1021 0080 F0E0      		ldi r31,0
 1022 0082 EE0F      		lsl r30
 1023 0084 FF1F      		rol r31
 1024 0086 E050      		subi r30,lo8(-(fruits))
 1025 0088 F040      		sbci r31,hi8(-(fruits))
 1026 008a 6091 0000 		lds r22,percentage
 1027 008e 8081      		ld r24,Z
 1028 0090 9181      		ldd r25,Z+1
 1029 0092 0E94 0000 		call displayFruit
 1030               	.LVL95:
  55:led.c         **** 
 1031               		.loc 3 55 0
 1032 0096 C093 0000 		sts selectingPercentage,r28
 1033               	.L45:
  58:led.c         ****             // Read the rotary encoder to adjust the percentage
 1034               		.loc 3 58 0
 1035 009a 8091 0000 		lds r24,selectingPercentage
 1036 009e 8823      		tst r24
 1037 00a0 01F4      		brne .+2
 1038 00a2 00C0      		rjmp .L40
 1039               	.LBB51:
  60:led.c         ****             if (rotation > 0 && percentage < 100) {
 1040               		.loc 3 60 0
 1041 00a4 0E94 0000 		call readEncoder
 1042               	.LVL96:
  61:led.c         ****                 percentage += 20;
 1043               		.loc 3 61 0
 1044 00a8 1816      		cp __zero_reg__,r24
 1045 00aa 04F4      		brge .L41
  61:led.c         ****                 percentage += 20;
 1046               		.loc 3 61 0 is_stmt 0 discriminator 1
 1047 00ac 6091 0000 		lds r22,percentage
 1048 00b0 6436      		cpi r22,lo8(100)
 1049 00b2 00F4      		brsh .L42
  62:led.c         ****                 displayFruit(fruits[fruitIndex], percentage);  // Update the displayed percentage
 1050               		.loc 3 62 0 is_stmt 1
 1051 00b4 6C5E      		subi r22,lo8(-(20))
 1052 00b6 00C0      		rjmp .L60
 1053               	.L41:
  64:led.c         ****                 percentage -= 20;
 1054               		.loc 3 64 0
 1055 00b8 8823      		tst r24
 1056 00ba 01F0      		breq .L42
  64:led.c         ****                 percentage -= 20;
 1057               		.loc 3 64 0 is_stmt 0 discriminator 1
 1058 00bc 6091 0000 		lds r22,percentage
 1059 00c0 6623      		tst r22
 1060 00c2 01F0      		breq .L42
  65:led.c         ****                 displayFruit(fruits[fruitIndex], percentage);  // Update the displayed percentage
 1061               		.loc 3 65 0 is_stmt 1
 1062 00c4 6451      		subi r22,lo8(-(-20))
 1063               	.L60:
 1064 00c6 6093 0000 		sts percentage,r22
  66:led.c         ****             }
 1065               		.loc 3 66 0
 1066 00ca E091 0000 		lds r30,fruitIndex
 1067 00ce F0E0      		ldi r31,0
 1068 00d0 EE0F      		lsl r30
 1069 00d2 FF1F      		rol r31
 1070 00d4 E050      		subi r30,lo8(-(fruits))
 1071 00d6 F040      		sbci r31,hi8(-(fruits))
 1072 00d8 8081      		ld r24,Z
 1073 00da 9181      		ldd r25,Z+1
 1074               	.LVL97:
 1075 00dc 0E94 0000 		call displayFruit
 1076               	.LVL98:
 1077               	.L42:
  70:led.c         ****                 _delay_ms(50); // Debounce delay
 1078               		.loc 3 70 0
 1079 00e0 0E94 0000 		call isEncoderPressed
 1080               	.LVL99:
 1081 00e4 8823      		tst r24
 1082 00e6 01F0      		breq .L40
 1083               	.LVL100:
 1084               	.LBB52:
 1085               	.LBB53:
 187:/usr/lib/avr/include/util/delay.h **** 
 1086               		.loc 2 187 0
 1087 00e8 83ED      		ldi r24,lo8(12499)
 1088 00ea 90E3      		ldi r25,hi8(12499)
 1089 00ec 0197      	1:	sbiw r24,1
 1090 00ee 01F4      		brne 1b
 1091 00f0 00C0      		rjmp .
 1092 00f2 0000      		nop
 1093               	.LVL101:
 1094               	.LBE53:
 1095               	.LBE52:
  72:led.c         ****                     percentages[fruitIndex] = percentage;  // Store the selected percentage
 1096               		.loc 3 72 0
 1097 00f4 0E94 0000 		call isEncoderPressed
 1098               	.LVL102:
 1099 00f8 8823      		tst r24
 1100 00fa 01F0      		breq .L40
  73:led.c         ****                     fruitIndex++;  // Move to the next fruit
 1101               		.loc 3 73 0
 1102 00fc E091 0000 		lds r30,fruitIndex
 1103 0100 AE2F      		mov r26,r30
 1104 0102 B0E0      		ldi r27,0
 1105 0104 A050      		subi r26,lo8(-(percentages))
 1106 0106 B040      		sbci r27,hi8(-(percentages))
 1107 0108 8091 0000 		lds r24,percentage
 1108 010c 8C93      		st X,r24
  74:led.c         **** 
 1109               		.loc 3 74 0
 1110 010e EF5F      		subi r30,lo8(-(1))
 1111 0110 E093 0000 		sts fruitIndex,r30
  76:led.c         ****                         percentage = 0;  // Reset percentage for the next fruit
 1112               		.loc 3 76 0
 1113 0114 E430      		cpi r30,lo8(4)
 1114 0116 00F4      		brsh .L44
  77:led.c         ****                         displayFruit(fruits[fruitIndex], percentage);  // Display next fruit
 1115               		.loc 3 77 0
 1116 0118 1092 0000 		sts percentage,__zero_reg__
  78:led.c         ****                     } else {
 1117               		.loc 3 78 0
 1118 011c F0E0      		ldi r31,0
 1119 011e EE0F      		lsl r30
 1120 0120 FF1F      		rol r31
 1121 0122 E050      		subi r30,lo8(-(fruits))
 1122 0124 F040      		sbci r31,hi8(-(fruits))
 1123 0126 60E0      		ldi r22,0
 1124 0128 8081      		ld r24,Z
 1125 012a 9181      		ldd r25,Z+1
 1126 012c 0E94 0000 		call displayFruit
 1127               	.LVL103:
 1128 0130 00C0      		rjmp .L40
 1129               	.L44:
  80:led.c         ****                         checkPercentageSum();  // Check if total exceeds 100
 1130               		.loc 3 80 0
 1131 0132 1092 0000 		sts selectingPercentage,__zero_reg__
  81:led.c         ****                     }
 1132               		.loc 3 81 0
 1133 0136 0E94 0000 		call checkPercentageSum
 1134               	.LVL104:
 1135               	.L40:
 1136               	.LBE51:
 1137               	.LBB54:
 1138               	.LBB55:
 187:/usr/lib/avr/include/util/delay.h **** 
 1139               		.loc 2 187 0
 1140 013a 83ED      		ldi r24,lo8(12499)
 1141 013c 90E3      		ldi r25,hi8(12499)
 1142 013e 0197      	1:	sbiw r24,1
 1143 0140 01F4      		brne 1b
 1144 0142 00C0      		rjmp .
 1145 0144 0000      		nop
 1146 0146 00C0      		rjmp .L45
 1147               	.LBE55:
 1148               	.LBE54:
 1149               		.cfi_endproc
 1150               	.LFE17:
 1152               		.local	lastStateCLK.1829
 1153               		.comm	lastStateCLK.1829,1,1
 1154               	.global	switch1Pressed
 1155               		.section .bss
 1158               	switch1Pressed:
 1159 0000 00        		.zero	1
 1160               	.global	selectingPercentage
 1163               	selectingPercentage:
 1164 0001 00        		.zero	1
 1165               	.global	percentage
 1168               	percentage:
 1169 0002 00        		.zero	1
 1170               	.global	percentages
 1173               	percentages:
 1174 0003 0000 0000 		.zero	4
 1175               	.global	fruitIndex
 1178               	fruitIndex:
 1179 0007 00        		.zero	1
 1180               	.global	fruits
 1181               		.section	.rodata.str1.1
 1182               	.LC12:
 1183 0084 5049 4E45 		.string	"PINEAPPLE"
 1183      4150 504C 
 1183      4500 
 1184               	.LC13:
 1185 008e 4D41 4E47 		.string	"MANGO"
 1185      4F00 
 1186               	.LC14:
 1187 0094 4150 504C 		.string	"APPLE"
 1187      4500 
 1188               	.LC15:
 1189 009a 4F52 414E 		.string	"ORANGE"
 1189      4745 00
 1190               		.data
 1193               	fruits:
 1194 0000 0000      		.word	.LC12
 1195 0002 0000      		.word	.LC13
 1196 0004 0000      		.word	.LC14
 1197 0006 0000      		.word	.LC15
 1198               		.text
 1199               	.Letext0:
 1200               		.file 4 "/usr/lib/avr/include/stdint.h"
 1201               		.file 5 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 led.c
     /tmp/ccenZsrN.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccenZsrN.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccenZsrN.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccenZsrN.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccenZsrN.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccenZsrN.s:12     .text:0000000000000000 i2c_init
     /tmp/ccenZsrN.s:35     .text:0000000000000012 i2c_start
     /tmp/ccenZsrN.s:59     .text:0000000000000022 i2c_stop
     /tmp/ccenZsrN.s:76     .text:000000000000002a i2c_write
     /tmp/ccenZsrN.s:105    .text:000000000000003e lcd_enable
     /tmp/ccenZsrN.s:171    .text:0000000000000070 lcd_send
     /tmp/ccenZsrN.s:219    .text:0000000000000094 lcd_command
     /tmp/ccenZsrN.s:237    .text:000000000000009a lcd_print
     /tmp/ccenZsrN.s:280    .text:00000000000000b4 lcd_clear
     /tmp/ccenZsrN.s:317    .text:00000000000000c8 lcd_setCursor
     /tmp/ccenZsrN.s:385    .text:0000000000000110 initialize
     /tmp/ccenZsrN.s:430    .text:0000000000000138 setup
     /tmp/ccenZsrN.s:459    .text:000000000000014a isSwitch1Pressed
     /tmp/ccenZsrN.s:478    .text:0000000000000152 isEncoderPressed
     /tmp/ccenZsrN.s:504    .text:0000000000000160 displayWelcome
     /tmp/ccenZsrN.s:534    .text:0000000000000174 displayProcessing
     /tmp/ccenZsrN.s:566    .text:0000000000000188 displayChoosePercentages
     /tmp/ccenZsrN.s:608    .text:00000000000001ac displayExceed100
     /tmp/ccenZsrN.s:664    .text:00000000000001e4 displayFruit
     /tmp/ccenZsrN.s:782    .text:0000000000000268 displayOrderComplete
     /tmp/ccenZsrN.s:818    .text:000000000000028c checkPercentageSum
     /tmp/ccenZsrN.s:1173   .bss:0000000000000003 percentages
     /tmp/ccenZsrN.s:1178   .bss:0000000000000007 fruitIndex
     /tmp/ccenZsrN.s:1168   .bss:0000000000000002 percentage
     /tmp/ccenZsrN.s:1193   .data:0000000000000000 fruits
     /tmp/ccenZsrN.s:1163   .bss:0000000000000001 selectingPercentage
     /tmp/ccenZsrN.s:868    .text:00000000000002cc readEncoder
                             .bss:0000000000000008 lastStateCLK.1829
     /tmp/ccenZsrN.s:919    .text.startup:0000000000000000 main
     /tmp/ccenZsrN.s:1158   .bss:0000000000000000 switch1Pressed

UNDEFINED SYMBOLS
snprintf
__do_copy_data
__do_clear_bss
